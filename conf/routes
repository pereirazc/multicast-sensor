# Routes
# This file defines all application routes (Higher priority routes first)
# ~~~~

# Home page
GET           /                                              controllers.Application.index()

# Routes used by Angular
# ~~~~

# Authentication
GET           /login                                         controllers.SecurityCtrl.loginIndex()
POST          /login                                         controllers.SecurityCtrl.login()
GET           /logout                                        controllers.SecurityCtrl.logout()

# Users
#GET     /user                   controllers.UserCtrl.getUser()

GET           /api/sensors                                   controllers.rest.SensorCtrl.getAllSensors()
POST          /api/sensors                                   controllers.rest.SensorCtrl.createSensor()
GET           /api/sensors/:sensorId                         controllers.rest.SensorCtrl.getSensor(sensorId: String)
POST          /api/sensors/:sensorId                         controllers.rest.SensorCtrl.updateSensor(sensorId: String)
POST          /api/sensors/:sensorId/key                     controllers.rest.SensorCtrl.generateNewKey(sensorId: String)
DELETE        /api/sensors/:sensorId                         controllers.rest.SensorCtrl.deleteSensor(sensorId: String)

GET           /api/sensors/:sensorId/feeds/:feedId           controllers.rest.FeedCtrl.getFeed(sensorId: String, feedId: String)
POST          /api/sensors/:sensorId/feeds                   controllers.rest.FeedCtrl.createFeed(sensorId: String)
POST          /api/sensors/:sensorId/feeds/:feedId           controllers.rest.FeedCtrl.updateFeed(sensorId: String, feedId: String)
DELETE        /api/sensors/:sensorId/feeds/:feedId           controllers.rest.FeedCtrl.deleteFeed(sensorId: String, feedId: String)

## Sensor
#
GET           /sensors                                       controllers.SensorCtrl.sensorDashboard()
GET           /sensors/new                                   controllers.SensorCtrl.newSensor()
POST          /sensors                                       controllers.SensorCtrl.createSensor()
GET           /sensors/:sensorId                             controllers.SensorCtrl.getSensor(sensorId: String)
GET           /sensors/:sensorId/edit                        controllers.SensorCtrl.editSensor(sensorId: String)
POST          /sensors/:sensorId                             controllers.SensorCtrl.updateSensor(sensorId: String)
#POST   /sensors/:sensorId/key  controllers.SensorCtrl.generateNewKey(sensorId: String)
GET           /sensors/:sensorId/delete                      controllers.SensorCtrl.deleteSensor(sensorId: String)
#
## Feed
#GET     /sensors/:sensorId/feeds/:feedId           controllers.FeedCtrl.getFeed(sensorId: String, feedId: String)
#POST    /sensors/:sensorId/feeds                   controllers.FeedCtrl.createFeed(sensorId: String)
#POST    /sensors/:sensorId/feeds/:feedId           controllers.FeedCtrl.updateFeed(sensorId: String, feedId: String)
GET           /sensors/:sensorId/feeds/:feedId/delete        controllers.FeedCtrl.deleteFeed(sensorId: String, feedId: String)
#
##API
#GET     /api/:sensorId/:feedId        controllers.APICtrl.getStream(sensorId: String, feedId: String)
#POST    /api/:sensorId/:feedId        controllers.APICtrl.postData(sensorId: String, feedId: String)

# Static
# ~~~~

### Enable www.WebJars.org based resources to be returned
GET           /webjars/*file                                 controllers.WebJarAssets.at(file)
# Map static resources from the /public folder to the /assets URL path
GET           /assets/*file                                  controllers.Assets.at(path="/public", file)
